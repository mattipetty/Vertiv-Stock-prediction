library(forecast)
library(tidyverse)
library(lubridate)
# Assuming the file is in your current working directory or a known path
file_path <- "C:/Users/matti/Desktop/Vertiv/VRT.csv"
file_path <- "VRT.csv" # Adjust the path as necessary
data <- read_csv(file_path)
data$Date <- as.Date(data$Date, format="%Y-%m-%d")
ts_data <- ts(data$Close, frequency=365)
fit <- auto.arima(ts_data)
future_forecast <- forecast(fit, h=30) # Adjust 'h' for the number of periods you want to forecast
plot(future_forecast)
ts_data <- ts(data$Close, frequency=365)
library(forecast)
# Fit the neural network model
nn_model <- nnetar(ts_data)
# Summary of the model
summary(nn_model)
# Forecast the next 30 days
nn_forecast <- forecast(nn_model, h=30)
# Plot the forecast
plot(nn_forecast)
# Calculate the in-sample fitted values from the neural network model
fitted_values <- fitted(nn_model)
# Calculate the MSE for in-sample predictions
mse_in_sample <- mean((data$Close - fitted_values)^2)
mse_in_sample
library(forecast)
library(tidyverse)
library(lubridate)
# Assuming the file is in your current working directory or a known path
file_path <- "C:/Users/matti/Desktop/Vertiv/VRT.csv"
file_path <- "VRT.csv" # Adjust the path as necessary
data <- read_csv(file_path)
data$Date <- as.Date(data$Date, format="%Y-%m-%d")
ts_data <- ts(data$Close, frequency=365)
fit <- auto.arima(ts_data)
future_forecast <- forecast(fit, h=30) # Adjust 'h' for the number of periods you want to forecast
plot(future_forecast)
ts_data <- ts(data$Close, frequency=365)
library(forecast)
# Fit the neural network model
nn_model <- nnetar(ts_data)
# Summary of the model
summary(nn_model)
# Forecast the next 30 days
nn_forecast <- forecast(nn_model, h=30)
# Plot the forecast
plot(nn_forecast)
# Assuming 'nn_forecast' contains the forecast object from the nnetar model
# Find the range of the time series data for the x-axis
time_range <- time(ts_data)
last_obs <- max(time_range)
# Plot the original time series and the forecast with limits set on the x-axis
plot(nn_forecast, xlim=c(last_obs - 50, last_obs + 30))
# Find the length of the historical time series data
n <- length(ts_data)
# Define the x-axis limits to include some historical data points and all forecasted points
# Here '50' is an example value; adjust it to include as much historical data as you want
xlim_values <- c(n - 50, n + length(nn_forecast$mean))
# Plot the forecast with the adjusted x-axis limits
plot(nn_forecast, xlim=xlim_values)
# Forecast the next 30 days
nn_forecast <- forecast(nn_model, h=30)
# Plot the forecast, but this time let the function decide the x-axis
plot(nn_forecast)
plot(nn_forecast, xlim=c(1.6*length(ts_data), 1.9*length(ts_data)))
plot(nn_forecast, xlim=c(1.6*length(ts_data), 1.9*length(ts_data)))
# Find the last index of the historical data
end_of_hist <- length(ts_data)
# Define the x-axis limits for the last part of historical data and the forecast
plot(nn_forecast, xlim=c(end_of_hist - (0.4 * end_of_hist), end_of_hist + (0.3 * end_of_hist)))
# Calculate the starting index for the forecast
start_forecast_index <- length(ts_data)
# Calculate the ending index for the forecast
end_forecast_index <- start_forecast_index + length(nn_forecast$mean)
# Plot the original time series and the forecast with adjusted x-axis limits
plot(nn_forecast, xlim=c(start_forecast_index, end_forecast_index))
# After you've created your time series object and fit the neural network model
# Assuming ts_data is your time series object and nn_forecast is the forecast object
last_obs <- length(ts_data)  # Index of the last observation in the historical data
forecast_indices <- last_obs + (1:30)  # Indices for the forecasted points
# Now let's plot the forecast and zoom in on the forecast area
plot(nn_forecast, xlim=c(min(forecast_indices), max(forecast_indices)))
total_points <- length(ts_data)
last_point <- total_points
forecast_start <- last_point + 1
forecast_end <- last_point + 30
plot(nn_forecast, xlim=c(forecast_start - 50, forecast_end))
library(forecast)
library(tidyverse)
library(lubridate)
# Assuming the file is in your current working directory or a known path
file_path <- "C:/Users/matti/Desktop/Vertiv/VRT.csv"
file_path <- "VRT.csv" # Adjust the path as necessary
data <- read_csv(file_path)
data$Date <- as.Date(data$Date, format="%Y-%m-%d")
ts_data <- ts(data$Close, frequency=365)
fit <- auto.arima(ts_data)
future_forecast <- forecast(fit, h=30) # Adjust 'h' for the number of periods you want to forecast
plot(future_forecast)
ts_data <- ts(data$Close, frequency=365)
library(forecast)
# Fit the neural network model
nn_model <- nnetar(ts_data)
# Summary of the model
summary(nn_model)
# Forecast the next 30 days
nn_forecast <- forecast(nn_model, h=30)
# Plot the forecast
plot(nn_forecast)
library(forecast)
library(tidyverse)
library(lubridate)
# Assuming the file is in your current working directory or a known path
file_path <- "C:/Users/matti/Desktop/Vertiv/VRT.csv"
file_path <- "VRT.csv" # Adjust the path as necessary
data <- read_csv(file_path)
data$Date <- as.Date(data$Date, format="%Y-%m-%d")
ts_data <- ts(data$Close, frequency=365)
fit <- auto.arima(ts_data)
future_forecast <- forecast(fit, h=30) # Adjust 'h' for the number of periods you want to forecast
plot(future_forecast)
ts_data <- ts(data$Close, frequency=365)
library(forecast)
# Fit the neural network model
nn_model <- nnetar(ts_data)
# Summary of the model
summary(nn_model)
# Forecast the next 30 days
nn_forecast <- forecast(nn_model, h=30)
# Plot the forecast
plot(nn_forecast)
